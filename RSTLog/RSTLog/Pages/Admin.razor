@page "/admin"

<h3>Admin</h3>

<h4>Add A Transaction Type</h4>

<EditForm EditContext="_editContext" OnValidSubmit="Create" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label for="name" class="col-md-5 col-form-label">Name</label>
        <div class="col-md-10">
            <InputText id="name" class="form-control" @bind-Value="_customer.Name" />
            <ValidationMessage For="@(() => _customer.Name)" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success" disabled="@formInvalid">Create</button>
        </div>
    </div>
</EditForm>

@code {

    private Customer _customer = new Customer();
    private EditContext _editContext;
    private bool formInvalid = true;

    [Inject]
    public ICustomerHttpRepository CustomerRepo { get; set; }

    [Inject]
    public HttpInterceptorService Interceptor { get; set; }

    [Inject]
    public IToastService ToastService { get; set; }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_customer);
        _editContext.OnFieldChanged += HandleFieldChanged;
        Interceptor.RegisterEvent();
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        formInvalid = !_editContext.Validate();
        StateHasChanged();
    }

    private async Task Create()
    {
        await CustomerRepo.CreateCustomer(_customer);

        ToastService.ShowSuccess($"Action successful." +
            $"Customer \"{_customer.Name}\" successfully added.");
        _customer = new Customer();
        _editContext.OnValidationStateChanged += ValidationChanged;
        _editContext.NotifyValidationStateChanged();
    }

    private void ValidationChanged(object sender, ValidationStateChangedEventArgs e)
    {
        formInvalid = true;
        _editContext.OnFieldChanged -= HandleFieldChanged;
        _editContext = new EditContext(_customer);
        _editContext.OnFieldChanged += HandleFieldChanged;
        _editContext.OnValidationStateChanged -= ValidationChanged;
    }

    public void Dispose()
    {
        Interceptor.DisposeEvent();
        _editContext.OnFieldChanged -= HandleFieldChanged;
        _editContext.OnValidationStateChanged -= ValidationChanged;
    }
}

